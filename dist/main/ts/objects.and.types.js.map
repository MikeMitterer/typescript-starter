{"version":3,"file":"objects.and.types.js","sourceRoot":"","sources":["../../../src/main/ts/objects.and.types.ts"],"names":[],"mappings":";;;;;;;;;;;IAAA,IAAI,IAAI,GAAW,MAAM,CAAC;IAEb,QAAA,QAAQ,GAAG;QACpB,IAAI,EAAE,IAAI;QACV,GAAG,EAAE,EAAE;KACV,CAAC;IAEF;;;;OAIG;IACU,QAAA,QAAQ,GAAkC;QACnD,IAAI,EAAE,OAAO;QACb,GAAG,EAAE,EAAE;KACV,CAAC;IAEF;;OAEG;IACU,QAAA,aAAa,GAAwD;QAC9E,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,UAAU,GAAW;YAC3B,OAAO,QAAQ,GAAG,EAAE,CAAA;QACxB,CAAC;KACJ,CAAA;IASY,QAAA,oBAAoB,GAAkB;QAC/C,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;KAClB,CAAC;IAEF,wHAAwH;IAE3G,QAAA,SAAS,GAAoB,EAAE,CAAC;IAE7C,SAAgB,aAAa,CAAC,GAAoB;QAC9C,OAAO,OAAO,GAAG,IAAI,QAAQ,CAAC,CAAC,CAAC,MAAM,GAAG,EAAE,CAAC,CAAC,CAAC,MAAM,GAAG,EAAE,CAAC;IAC9D,CAAC;IAFD,sCAEC;IAED,wHAAwH;IAExH;;OAEG;IACH,SAAgB,SAAS;QACrB,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAA;IACzC,CAAC;IAFD,8BAEC;IAED,wHAAwH;IAExH,SAAgB,eAAe,CAAC,oBAA6B;QACzD,OAAO,oBAAoB,IAAI,MAAM,CAAC,CAAC,CAAC,oBAAoB,CAAC,CAAC,CAAC,IAAI,CAAC;IACxE,CAAC;IAFD,0CAEC","sourcesContent":["let name: string = \"Mike\";\n\nexport const userName = {\n    name: name,\n    age: 99\n};\n\n/**\n * Type-Safe definition eines Objects\n *\n * Das Objekt hat zwei parameter: name + age\n */\nexport const userData: { name: string, age: number } = {\n    name: \"Gerda\",\n    age: 99\n};\n\n/**\n * Das komplexe Object hat eine Callback als zweiten parameter\n */\nexport const complexObject: { name: string, callback: (age: number) => string } = {\n    name: \"Mike\",\n    callback: function (age: number): string {\n        return `Age: ${age}`\n    }\n}\n\n/**\n * Type-Aliases\n *\n * Hier steht auf der rechten Seite eigentlich kein value sondern eine Type-Definition\n */\ntype ComplexObject = { name: string, data: number[]};\n\nexport const anotherComplexObject: ComplexObject = {\n    name: \"Mike\",\n    data: [4, 5, 6]\n};\n\n// - Union Types -------------------------------------------------------------------------------------------------------\n\nexport const myRealAge: number | string = 99;\n\nexport function showMyRealAge(age: number | string) : string {\n    return typeof age == \"number\" ? `N: ${age}` : `S: ${age}`;\n}\n\n// - never Type --------------------------------------------------------------------------------------------------------\n\n/**\n * Die Funktion endet nie - deshalb der return type: never\n */\nexport function neverEnds() : never {\n    throw new Error(\"An error occurred!\")\n}\n\n// - not nullable Types ------------------------------------------------------------------------------------------------\n\nexport function tryToReturnNull(paramShouldNotBeNull : string) : string | null {\n    return paramShouldNotBeNull == \"Mike\" ? paramShouldNotBeNull : null;\n}\n\n\n"]}