{"version":3,"file":"objects.and.types.spec.js","sourceRoot":"","sources":["../../../src/test/ts/objects.and.types.spec.ts"],"names":[],"mappings":";;;;;;;;;;;IAAA,iBAAe;IACf,iCAAiC;IACjC,uDAAuD;IAEvD,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;QAC/B,EAAE,CAAC,gBAAgB,EAAE,GAAG,EAAE;YACtB,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE;YACxB,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gCAAgC,EAAE;YACjC,MAAM,MAAM,GAAG,GAAG,CAAC,aAAa,CAAC;YAEjC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oBAAoB,EAAE,GAAG,EAAE;YAC1B,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,oBAAoB,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oDAAoD,EAAE;YACrD,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,aAAa,CAAC,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC;YAC7C,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,OAAO,CAAC,CAAC;YAE/C,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wBAAwB,EAAE;YACzB,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,SAAS,EAAE,EAAE,KAAK,CAAE,CAAA;YAC5C,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,SAAS,EAAE,KAAK,CAAE,CAAA;QACxC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wBAAwB,EAAE;YACzB,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,eAAe,CAAC,MAAM,CAAC,IAAI,IAAI,CAAE,CAAA;QACnD,CAAC,CAAC,CAAC;IAEP,CAAC,CAAC,CAAC","sourcesContent":["import \"mocha\";\nimport * as assert from \"assert\";\nimport * as oat from \"../../main/ts/objects.and.types\";\n\ndescribe(\"Objects and types\", () => {\n    it(\"dynamic object\", () => {\n        assert.equal(oat.userName.name, \"Mike\");\n    });\n\n    it(\"type-save-object\", () => {\n        assert.equal(oat.userData.name, \"Gerda\");\n    });\n\n    it('should return age via callback', function () {\n        const person = oat.complexObject;\n\n        assert.equal(person.callback(99), \"Age: 99\");\n    });\n\n    it(\"Describe your test\", () => {\n        assert.deepEqual(oat.anotherComplexObject.data, [4, 5, 6]);\n    });\n\n    it('should mark the type of function param as N: or S:', function () {\n        assert.equal(oat.showMyRealAge(99), \"N: 99\");\n        assert.equal(oat.showMyRealAge(\"99\"), \"S: 99\");\n\n        assert.equal(oat.myRealAge, \"99\");\n    });\n\n    it('should throw and error', function () {\n        assert.throws(() => oat.neverEnds(), Error )\n        assert.throws(oat.neverEnds, Error )\n    });\n\n    it('should not accept null', function () {\n        assert.ok(oat.tryToReturnNull(\"Mike\") != null )\n    });\n    \n});"]}