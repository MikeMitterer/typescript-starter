{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/test/ts/index.ts"],"names":[],"mappings":";;;;;;;;;;;IAAA,iBAAe;IACf,iCAAiC;IACjC,sCAA0C;IAE1C,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE;QAEnB,EAAE,CAAC,0BAA0B,EAAE,GAAG,EAAE;YAEhC,cAAS,CAAC,WAAW,EAAE,CAAC;YACxB,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;YAEhB,cAAS,CAAC,SAAS,EAAE,CAAC;YAEtB,8BAA8B;QAClC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qBAAqB,EAAE;YACtB,IAAI,YAAY,GAAG,IAAI,CAAC;YACxB,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,KAAK,YAAY,EACjC,6BAA6B,YAAY,EAAE,CAAC,CAAC;YAEjD,IAAI,MAAM,GAAG,MAAM,CAAC;YACpB,MAAM,CAAC,KAAK,CAAC,MAAM,EAAC,MAAM,CAAC,CAAA;QAC/B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,OAAO,EAAE;YAER,IAAI,OAAO,GAAc,CAAE,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,CAAC;YAClC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,EAAC,CAAC,CAAC,CAAA;YAE9B,IAAI,MAAM,GAAG,CAAE,MAAM,EAAE,CAAC,CAAC,CAAC;YAC1B,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,EAAC,CAAC,CAAC,CAAA;QACjC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,QAAQ,EAAE;YACT,IAAI,OAAO,GAAqB,CAAC,MAAM,EAAE,EAAE,CAAC,CAAA;YAE5C,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,EAAC,CAAC,CAAC,CAAA;QAClC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,MAAM,EAAE;YACP,IAAK,KAEJ;YAFD,WAAK,KAAK;gBACN,+BAAG,CAAA;gBAAE,mCAAK,CAAA;gBAAE,iCAAQ,CAAA;YACxB,CAAC,EAFI,KAAK,KAAL,KAAK,QAET;YAED,sBAAsB;YACtB,IAAI,KAAK,GAAW,KAAK,CAAC,KAAK,CAAC;YAChC,MAAM,CAAC,KAAK,CAAC,KAAK,EAAC,CAAC,CAAC,CAAA;YACrB,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAC,CAAC,CAAC,CAAA;QAE9B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8BAA8B,EAAE;YAC/B,IAAI,GAAG,GAAG,EAAE,KAAK,EAAG,MAAM,EAAE,MAAM,EAAG,CAAC,EAAE,CAAA;YACxC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,EAAC,CAAC,EAAE,wCAAwC,GAAG,CAAC,MAAM,EAAE,CAAC,CAAA;QACpF,CAAC,CAAC,CAAC;IAEP,CAAC,CAAC,CAAC","sourcesContent":["import \"mocha\";\nimport * as assert from \"assert\";\nimport { SmokeTest } from \"../../main/ts\";\n\ndescribe(\"index\", () => {\n\n    it(\"should say 'hello world'\", () => {\n\n        SmokeTest.helloWorld6();\n        assert.ok(true);\n\n        SmokeTest.sayMyName();\n\n        // assert.equal(giveAge(), 98)\n    });\n\n    it(\"Number should be 28\", function () {\n        let numberToTest = \"28\";\n        assert.ok(String(28) === numberToTest,\n            `Number was not 28 but was ${numberToTest}`);\n\n        let myName = \"Mike\";\n        assert.equal(myName,\"Mike\")\n    });\n\n    it(\"Array\", function () {\n\n        let hobbies : number[] = [ 1,2,3];\n        assert.equal(hobbies.length,3)\n\n        let names1 = [ \"Mike\", 2];\n        assert.equal(names1.length,2)\n    });\n\n    it(\"Tuples\", function () {\n        let address : [String,number] = ['Mike', 99]\n\n        assert.equal(address.length,2)\n    });\n\n    it(\"enum\", function () {\n        enum Color {\n            RED, GREEN, BLUE = 5\n        }\n\n        //assert.equal(Color.)\n        let color : Color = Color.GREEN;\n        assert.equal(color,1)\n        assert.equal(Color.BLUE,5)\n\n    });\n\n    it(\"The car should have 4 wheels\", function () {\n        let car = { brand : \"Audi\", wheels : 4 }\n        assert.equal(car.wheels,4, `Number of wheels should be 4 but was ${car.wheels}`)\n    });\n\n});"]}